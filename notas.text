

Ejercicos guardados

nombre = "Juan"
edad = 25
sexo = "masculino"
hobby = "Voliar_pistola"
print("Mi nombre es", nombre, "tengo" , edad, "años", "mi genero es", sexo, "Me gusta", hobby)

# Imprimir una cadena de texto
print("Hola Cabron!")
# Imprimir una variable
nombre = "Ana"
# Imprimir una expresión
suma = 1 + 2
# Imprimir múltiples objetos
print("El resultado es:", suma, "y el nombre es:", nombre, "y me gusta que me den por el *")


# Pedir el nombre del usuario
nombre = input("¿Cómo te llamas? ")
print(f"Hola, {nombre}!")
# Solicitar dos números y sumarlos
num1 = int(input("Introduce el primer número: "))
num2 = int(input("Introduce el segundo número: "))
suma = num1 + num2
print(f"La suma es: {suma}")

 # comparador

a = 52
b = 20
if a > b:
 print("a es mayor que b")
elif a < b:
 print("b es mayor que a")
else:
 print("a y b son iguales")

 # Validación de números

 numero = input("Introduce un número: ")
try:
    numero = int(numero)
    if numero > 0:
        print("El número es positivo")
    else:
        print("El número es negativo")
except  ValueError:
    print("El número introducido no es válido")

----------------------------------------------------------------------------------------------------------------

URL para estudiar mas metodos:

https://docs.python.org/es/3/library/stdtypes.html#string-methods


Mas Ejercicio  

a = 12
b = 7
print("suma:", a + b)
print("resta:", a - b)
print("multilpicación:", a * b)
print("Potenciación:", a ** b)
print("división:", a / b) 
print("Parte entera de la división:", a // b) 
print("Modulo:", a % b) 

print(a > b)
print(a < b)
print(a <= b)
print(a != b)

------------------------------------------------------------------------------------------------------------------------

nombre = input("Ingrese su nombre:")
edad = int(input("Ingrese su edad puto:"))
print(nombre)
print(type(nombre))
print(edad)
print(type(edad))
---------------------------------------------------------------------------------------------

# LISTA

a = [1,2,3,4,5,6,7,8,9]
b = a
print(a)
print(b)
del a[0]
print(id(a)) # Con esta palabra id, podmeos saber donde esta el espacio en memoria
print(id(b))
c = a[:] # de esta forma traemos todo lo que hay desde la pocisición cero hasta el final
print(id(a))
print(id(b))
print(id(c))
a.append(10)
print(a)
print(b)
print(c)

----------------------------------------------------------------------------------------------

# Ejercicios clase lista 


to_do = ["Dirigirnos al hotel", "Ir a Volear","Beber","Darle castigo a la baby"]
numbers =[1,2,3,4, "cinco"]
mix = ["uno",2,3.14, True, [1,2,3]]
print(to_do)
print(type(numbers))
print(mix)
print(len(mix))
print("Primer elemento", mix[0])
print("Segundo elemento", mix[1])
string = "Aprendiendo"
print("Primer elemento", string[3])  #Aqui tambien pedimos las pocisiones.
print("Segundo elemento", string[4])
print(mix[0:2]) # aqui toma las posiciones deseadas.
mix.append(False)
print(mix)
mix.append(["a","b"])
print(mix)
mix.insert(1,["a","b"])
print(mix)
print(mix.index(["a","b"]))  # Aqui podemos ver la posicion del elemento
numbers =[10,15,40,80,69,52,445,888,333,]
print(numbers)
print("Mayor",max(numbers))
print("Menor",min(numbers))
del numbers[-1]     #Con este metodo eleiminamos el último registro de la lista de números
print(numbers)
del  numbers[0:2]   # COn este metodo eleminamos las posiciones requeridas
print(numbers)
del numbers
print(numbers)      # Con este metodo eliminamos toda la lista.

----------------------------------------------------------------------------------------------

# Matrices
         #0 1 2
matrix =[[1,2,3], # 0
         [4,5,6], # 1
         [7,8,9]] # 2
print(matrix)
print(matrix[2][1])  # De esta forma podemos entrar a las posiciones de los elementos de las líneas
numbers = (1,2,3,4,5)
print(numbers)
print(type(numbers))  # Dice que la tuplas son inmutables
print(numbers[0])
#numbers[0] = 'uno'  # Con este se imprime el elemento número 1
#print(numbers)  

--------------------------------------------------------------------------------------------


 # Matrices

chess_board = [
    ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
    ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
    ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']
]

print(chess_board)
chess_board[7][1] = 0 # Casilla original del caballo ahora vacia 
chess_board[5][2] ='N' # Nueva Pocisión del caballo
print(chess_board)
--------------------------------------------------------------------------------------------

# Diccionario son estructuras q almacenan 2 datos la clave y el valor.

numbers = {1:"uno",2:"dos",3:"tres",}
print(numbers[2])
information = {"Nombre": "Santiago",
               "Apellido": "Tamayo",
               "Estatura": 1.75,
               "Edad": 36,
               }
print(information)
del information["Edad"] # con este metodo, podemos borrar alguna palabra del diccionario
print(information)
claves = information.keys()
print(type(claves))  # Aqui nos dice cual es el tipo de estas claves.
values = information.values() # Aqui nos muestra los valores que tenga en metodo
print(values)
pares = information.items() # CON esta nos muestra la información en pares..
print(pares)
contactos = {"Santiago":{ "Apellido": "Tamayo",
               "Estatura": 1.75,
               "Edad": 36},

               "Rogelio":{ "Apellido": "Chingon",
               "Estatura": 1.90,
               "Edad": 52},

               "Mariana":{ "Apellido": "Melano",
               "Estatura": 1.65,
               "Edad": 18}
               }
print(contactos)
print(contactos["Mariana"]) # De esta forma podemos acceder a la informacipon de cada nombre

---------------------------------------------------------------------------------------------

# Condicionales.

x = 10
if x > 10:        # Tener pesente la identación debajo de la X
    print("X es mayor que 10")
elif  x == 10:
    print("X es igual q 10")
else:
    print("X es menor que 10")
print("Estamos afuera")

------------------------------------------------------------------------------------------------

# CONDICIONALES

x = 15
y = 25

if x>10 and y>25:                          #aqui las 10 deben de ser verdaderas
    print("X es mayo que 10 y Y es mayor que 20")

if x>10  or y>25:                         #Aqui una de ls 2 puede ser verdadera
    print("X es mayor que 10 ó Y es mayor que 25")

if not x>10:
    print("X no es mayo que 10")           #Aqui niega

-----------------------------------------------------------------------------------------------

    # CONDICIONALES ANIDADOS

is_member= True
age = 18

if is_member:
    if age>=15:
        print("Tienes acceso ya que estas en el rango de edad y eres miembro")
    else:
        print("No tienes acceso no estas en el rango de edad")
else:
    print("No tienes acceso y no eres miembro")


------------------------------------------------------------------------------------------


numbers = [1, 2, 3, 4, 5, 6]
for i in numbers:
    print("Aqui i es igual a:",i+1)

for i in range(3,10):
    print(i)

fruits = ["Manzana", "Pera", "Uva", "Naranja", "Piña"]
for fruit in fruits:
    print(fruit)
    if fruit == "Naranja":
        print("Naranja encontrada")
x = 0
while x<5:
    if x == 3:
        break      #De esta forma paramos el ciclo infinito.
    print(x)
    x +=1          #De esta paramos el ciclo infinito.

numbers = [1, 2, 3, 4, 5, 6]
for i in numbers:
    if i == 3:
        continue
    print("Aqui i es igual a:",i)


    #Generadores e Iteradores

#Iterador / crear una lista

my_list = [1,2,3,4]       # crear lista 

my_iter = iter(my_list)   #obtener el iterador

print(next(my_iter))      # usar el iterador
print(next(my_iter))
print(next(my_iter))
print(next(my_iter))    # De esta forma podemos ver los elementos de la lista

#Iterador / crear una lista

text = "Hey Brot" 

iter_iter = iter(text)
for char in iter_iter:
    print(char)


# otro iterador para numeros impares

limit = 10

odd_itter = iter(range(1,limit+1,2))

#Usar el iterador

for num in odd_itter:
    print(num)

--------------------------------------------------------------------------------------------

def my_generator():    # Generador es una funcion que produce una secuencia de números
    yield 1
    yield 2
    yield 3

for value in my_generator():
    print(value)  

    # Fibonacci
# 0 1 2 3 4 5 6 7 8 9 10 11  12

def fibonacci(limit): #vamos a obtner un valor de 2 valores
        a, b = 0, 1
        while a< limit:     #Mientras_a
            yield a
            a, b =b, a+b
            
for num in fibonacci(10):
        print(num)

----------------------------------------------------------------------------------------------

#PARAMETRO POSICIONALES

# Dividir el codigo en partes o porciones para no duplicar funciones
# tener presente los parametros pocisionales.

def greet(name, last_name= "No tiene apellido"):
    print("Hola", name, last_name)

greet("Santiago", "Tamayo")
greet("Rogelio")
greet(last_name="Tamayo", name="Santiago") # de esta forma se imprimen los parametro ordenados

---------------------------------------------------------------------------------------------

# CALCULADORA PYTHON

def suma(a,b):
    return a+b

def resta(a,b):
    return a-b

def multiplicacion(a,b):
    return a*b

def division(a,b):
    return a/b

def calculadora():
    while True:
        print("Selecione una operación")
        print("1. Suma")
        print("2. Resta")
        print("3. Multiplpicar")
        print("4. Dividir")
        print("5. Salir")

        opcion = input("Seleccione número (1,2,3,4,5):")

        if opcion =="5":
            print("Esta saliendo de la calculadora")
            break

        if opcion in ["1","2","3","4"]:
            numero1 = float(input("Ingrese numero 1: "))
            numero2 = float(input("Ingrese numero 2: "))

        if opcion == "1":
            print("La Suma es:", suma(numero1, numero2))  

        elif opcion =="2":
            print("La Resta es:", resta(numero1, numero2))
         
        elif opcion =="3":
            print("La Multiplicación es:", multiplicacion(numero1, numero2))
            
        elif opcion =="4":
            print("La División es:", division(numero1, numero2))
            
        else:   #si no nos da
            print("Opción no valida,intente de nuevo ")
            break

calculadora()
---------------------------------------------------------------------------------------------

# FUNCIONES ANONIMAS LAMBDA

suma = lambda a,b: a + b
print(suma(45,25))

multiplicar = lambda a,b: a * b
print(multiplicar(85,41))

#Cuadra de cad número

numeros= range(11)
cuadrado_numeros = list(map(lambda x: x**2, numeros)) # aqui indicamos que la función lambda, aplica los cudrados a cada numero
print("Números Cuadrados:", cuadrado_numeros)

#Obtenere números Pares

evento_numero = list(filter(lambda x: x%2 ==0, numeros))
print("Los números pares son:", evento_numero)

-------------------------------------------------------------------------------------------

#FUNCIÓN RECURSIVA  # Requisito laboral tener presente

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

factorial_5 = print(factorial(5)) # en pocas palabras 5!= 5*4*3*2*1 seria tal cual la misma operación.

# Fibonacci

-------------------------------------------------------------------------------------------

class Persona:
    def __init__(self, nombre, edad):
        self.nombre = nombre
        self.edad = edad

    def saludar(self):
        print(f"Hola, me llamo {self.nombre} y tengo {self.edad}")

Persona_1 = Persona("Beto", 52)
Persona_2 = Persona("Eladio", 85)

Persona_1.saludar()
Persona_2.saludar()

--------------------------------------------------------------------------------------------------

# Ejercicio Cuenta Bancaria

class BankAccount:
    def __init__(self, account_foulder,balance): # Este es el constructor
        self.account_foulder = account_foulder
        self.balance = balance
        self.is_active =True


    def deposit(self, amount): #Revizar el deposito
        if self.is_active:
            self.balance += amount
            print(f"Se ha depositado {amount}. Saldo actual {self.balance}")
        else:
            print("no se puede depositar, Cuenta inactiva")


    def withdraw(self, amount):    # Retirar
        if self.active:
            if amount <= self.balance:
                self.balance -=amount
                print(f"Realizo un retiro {amount}. Saldo actual {self.balance}")
            else:
                print("Fondos insuficientes")
        else:
            print("No se puede retirar, Cuenta inactiva")


    def desactive_account(self):    # Desactivar cuenta
        self.is_active: False
        print(f"Cuenta ha sido desactivada")

    
    def active_account(self):       # Cuenta activada.
        self.is_active: True
        print(f"Cuenta activada")


account1 = BankAccount("Santiago", 100000)   # Creación de las cuentas "Objetos"
account2 = BankAccount("Rogelio", 80000)
account3 = BankAccount("Sara", 5000)

# Llamados de los Metodos / o acciones a realizar

account1.deposit(200)
account2.deposit(400)
account1.desactive_account()
account1.deposit(10)          # Aqui tengo error por que deberia enviar la alerta de qu esta desactivada.
account2.balance(100)
account3.withdraw(500)
#print(f"Saldo de la cuenta  {account2.account_foulder}: {account2.balance} ")  # Muestra el saldo en lugar de intentar llamar a balance()

------------------------------------------------------------

# GESTION DE BIBLIOTECA

class Book:
    def __init__(self, title, author):  # constructor
        self.title = title
        self.author = author
        self.available = True  # Estado del libro

    def borrow(self):
        if self.available:
            self.available = False
            print(f"EL libro {self.title} ha sido prestado")
        else:
            print(f"EL libro {self.title} no esta disponible")


    def return_book(self): # Retornar libro
        self.available = True
        print(f"El libro {self.title} ha sido regresado")


class User:
    def __init__(self, name, user_id):   # Constructor para el usuario que presta los libros
        self.name = name
        self.user_id = user_id
        self.borrowed_books = []     #Aqui se va llenando la lista 

    def borrow_book(self, book):  # Funcion prestarnos un libro
        if book.available:
            book.borrow()
            self.borrowed_books.append(book)
        else:
            print(f"El libro {book.title} no disponible")


    def return_book(self, book):
        if book in self.borrowed_books:
            book.return_book()
            self.borrowed_books.remove(book)
        else:
            print(f"EL libro {book.title} no esta en la lista")

class Library:
    def __init__(self):
        self.books = []
        self.users = []
    
    def add_book(self, book):   # Añadir Add libro nuevamente
        self.books.append(book)
        print(f"El libro {book.title} ha sido agregado al inventario")


    def register_user(self, user):  # Crear usuario
        self.users.append(user)
        print(f"El usuario {user.name} ha sido registrado")


    def show_available_books(self): # Mostrar libors disponibles
        print(" Los libros disponibles son:")
        for book in self.books:
            if book.available:
                 print(f"{book.title} por {book.author}")


# Creación de libros (Objetos de la bibliteca)
book1 = Book("El principito", "Antoine de Saint")
book2 = Book("1984", "George Orwell")
book3 = Book("Las 48 leyes del poder", "Robert Greene")

# Crear Usuario
user1 = User("Santiago", "001")
user2 = User("Marcelo", "002")

# Crear Biblioteca
library = Library()
library.add_book(book1)
library.add_book(book2)  # Corregido para añadir el segundo libro
library.add_book(book3)  
library.register_user(user1)

# Mostrar libros
library.show_available_books()

# Realizar prestamo
user1.borrow_book(book3)

# Mostrar Libros
library.show_available_books()

# Devolver libro
user1.return_book(book3)

# Mostrar Libros
library.show_available_books()

-------------------------------------------------------------------------------------------


#CONCESIONARIO

class Car:
    def __init__(self, brand, model, price):  # CLase construtora
        self.brand = brand
        self.model = model
        self.price = price
        self. is_available = True
    
    def sell(self):  #Vender
        if self.is_available:
            self.is_available = False
            print(f"El vehiculo {self.brand} ha sido vendido")
        else:
            print(f"El vehiculo {self.brand} no esta disponible")


    def check_avalability(self):  #Estado que verifica si esta disponible o no.
        return self.is_available
    
    def get_price(self):    # Metodo GEt para devolver la información que esta en una variable.
        return self.price
        

class Customer:    # Clases del CLiente
    def __init__(self, name):
        self.name = name
        self.cars_purchased = []  # [purchased]Aqui esta el listado dela colección de autos del cliente.

    def buy_car(self, car):
        if car.check_avalability():
            car.sell()
            self.cars_purchased.append(car)
        else:
            print(f"Estas chingado pedo, {car.brand} {car.model} no esta disponible")

    def inquire_car(self, car):  # Metodo de consulta si esta disponible
        availability = "Disponible" if car.check_avalability() else "No disponible"
        print(f"EL vehiculo {car.brand} {car.model} está {availability} y cuesta {car.price}")

class Dealership:             # Manejador de lista de inventarios
    def __init__(self):
        self.inventory = []   # Lista de inventario
        self.customers = []   # Compradores o clientes

    def add_car(self, car):   # Añadir al alista de clientes
        self.inventory.append(car)
        print(f"El vehiculo {car.brand} {car.model} ha sido agregado a la lista de inventario")


    def register_customer(self, customer):   # Lista de compradores
         self.customers.append(customer)
         print(f"El cliente {customer.name} ha sido registrado en el concesionario.")


    def show_available_cars(self):            # Mostrar carros disponibles
        print("Estos son los vehiculos disponibles")
        for car in self.inventory:
            if car.check_avalability():
                 print(f"- {car.brand} {car.model} por {car.get_price}")


# Instancias de coches

car1 = Car("BMW", "M4", 18000)
car2 = Car("Volkswagen", "Gol-GTI", 25000)
car3 = Car("Jeep", "Rawngler", 35000)


# Instancia de clientes

customer1 = Customer("Santiago")
customer2 = Customer("Rogelio")
customer3 = Customer("Carolina")

# Instancia de concesionaria y registrar Vehiculo y cliente

dealership = Dealership()
dealership.add_car(car1)
dealership.add_car(car2)
dealership.add_car(car3)
dealership.register_customer(customer1)

# Mostrar vehiculos disponibles
dealership.show_available_cars()

# CLiente consulta un vehiculo
customer1.inquire_car(car1)

#CLiente compra un vehoculo
customer1.buy_car(car1)

#Mostrar vehiculos disponibles
dealership.show_available_cars()

#Cliente intenta compmra n vehiculo ya vendido
customer2.buy_car(car1)

---------------------------------------------------------------------------------------

#SUPERCLASES


class LivingBeing:
    def __init__(self, name):
        self.name = name

class Person(LivingBeing):
    def __init__(self, name, age):
        super().__init__(name)
        self.age = age

class Student(Person):
    def __init__(self, name, age, student_id):
        super().__init__(name, age)
        self.student_id = student_id

    def introduce(self):
        print(f"Hi, I'm {self.name}, {self.age} years old, and my student ID is {self.student_id}")

# Crear instancia de Student
student = Student("Carlos", 21, "S54321")
student.introduce()  # Output: Hi, I'm Carlos, 21 years old, and my student ID is S54321

-------------------------------------------------------------------------------------------

#METODOS __srt__ y __repr__


class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __str__(self):
        return f"{self.name}, {self.age} años"

    def __repr__(self):
        return f"Person(name={self.name}, age={self.age})"

# Crear instancias de Person
person1 = Person("Alice", 30)
person2 = Person("Bob", 25)

# Uso de __str__
print(person1)  # Output: Alice, 30 años
print(person2)

# Uso de __repr__
print(repr(person1))  # Output: Person(name=Alice, age=30)
print(repr(person2))

-------------------------------------------------------------------------------------

#JUEGO BATALLA NAVAL ! MATRIZ ¡

class Ship:
    def __init__(self, name, size):
        self.name = name
        self.size = size
        self.positions = []
        self.hits = 0

    def place_ship(self, start_row, start_col, direction, board):
        positions = []
        if direction == 'H':
            if start_col + self.size > len(board[0]):
                return False
            for i in range(self.size):
                if board[start_row][start_col + i] != ' ':
                    return False
                positions.append((start_row, start_col + i))
        elif direction == 'V':
            if start_row + self.size > len(board):
                return False
            for i in range(self.size):
                if board[start_row + i][start_col] != ' ':
                    return False
                positions.append((start_row + i, start_col))
        else:
            return False
        
        for pos in positions:
            board[pos[0]][pos[1]] = self.name[0]
        self.positions = positions
        return True

    def hit(self):
        self.hits += 1
        return self.hits == self.size

class Destroyer(Ship):
    def __init__(self):
        super().__init__('Destructor', 2)

class Submarine(Ship):
    def __init__(self):
        super().__init__('Submarino', 3)

class Battleship(Ship):
    def __init__(self):
        super().__init__('Acorazado', 4)

class Player:
    def __init__(self, name):
        self.name = name
        self.board = [[' ' for _ in range(10)] for _ in range(10)]
        self.ships = []
        self.hits = [[' ' for _ in range(10)] for _ in range(10)]

    def place_ships(self):
        ships = [Destroyer(), Submarine(), Battleship()]
        for ship in ships:
            while True:
                print(f"{self.name}, coloca tu {ship.name} de tamaÃ±o {ship.size}.")
                start_row = int(input("Fila inicial: "))
                start_col = int(input("Columna inicial: "))
                direction = input("DirecciÃ³n (H para horizontal, V para vertical): ").upper()
                if ship.place_ship(start_row, start_col, direction, self.board):
                    self.ships.append(ship)
                    self.print_board(self.board)
                    break
                else:
                    print("PosiciÃ³n no vÃ¡lida. IntÃ©ntalo de nuevo.")

    def print_board(self, board):
        for row in board:
            print(" ".join(row))
        print()

    def attack(self, opponent):
        while True:
            print(f"{self.name}, elige una posiciÃ³n para atacar.")
            row = int(input("Fila: "))
            col = int(input("Columna: "))
            if 0 <= row < 10 and 0 <= col < 10:
                if opponent.board[row][col] == ' ':
                    print("Agua!")
                    self.hits[row][col] = 'A'
                    opponent.board[row][col] = 'A'
                    break
                elif opponent.board[row][col] != 'A':
                    print("Impacto!")
                    self.hits[row][col] = 'T'
                    for ship in opponent.ships:
                        if (row, col) in ship.positions:
                            if ship.hit():
                                print(f"Â¡Hundido! Has hundido el {ship.name}.")
                            break
                    opponent.board[row][col] = 'T'
                    break
                else:
                    print("Ya has atacado esta posiciÃ³n. Intenta de nuevo.")
            else:
                print("PosiciÃ³n no vÃ¡lida. Intenta de nuevo.")

    def all_ships_sunk(self):
        return all(ship.hits == ship.size for ship in self.ships)

class BattleshipGame:
    def __init__(self):
        self.player1 = Player("Jugador 1")
        self.player2 = Player("Jugador 2")

    def play(self):
        print("Bienvenido al juego de Batalla Naval!")
        print("Jugador 1 coloca sus barcos.")
        self.player1.place_ships()
        print("Jugador 2 coloca sus barcos.")
        self.player2.place_ships()

        current_player = self.player1
        opponent = self.player2

        while True:
            current_player.attack(opponent)
            if opponent.all_ships_sunk():
                print(f"Â¡{current_player.name} ha ganado el juego!")
                break
            current_player, opponent = opponent, current_player

# Crear una instancia del juego y jugar
game = BattleshipGame()
game.play()


-------------------------------------------------------------------------------------


contador = 0

while contador < 50:
    contador += 1
    if  (contador % 2) == 0: # De esta forma me ignora los pares
        continue
    print(contador)
    print("ok")
    
    --------------------------------------------------------------------------------



# Estructuras anidadas


contador1 = 2

while contador1 < 5:
    contador2 = 0
    while contador2 < 5:
        print(contador1, contador2) #
        contador2 +=1
    contador1 +=1

--------------------------------------------------------------------------------


import random  # El randon define el numero aleatoriamente.

numero_secreto = random.randint(1, 20)
intentos = 0
max_intentos = 5
adivinado = False

print("Estoy pensando en un número entre 1 y 20.")
while intentos < max_intentos and not adivinado:
    intento = int(input("Intenta adivinar el número: "))
    intentos += 1
    if intento == numero_secreto:
        print("¡Correcto! Adivinaste el número en", intentos, "intentos.")
        adivinado = True
    elif intento < numero_secreto:
        print("El número es mayor que", intento)
    else:
        print("El número es menor que", intento)

if not adivinado:
    print("Lo siento, no adivinaste el número en el número máximo de intentos.")
    print("El número secreto era", numero_secreto)

-------------------------------------------------------------------------------------------

palabra = input("Ingresa una palabra: ")
inverso = ""
for letra in palabra:
    inverso = letra + inverso
print("La palabra en orden inverso es:", inverso) #modifica la posicion de las letras


----------------------------------------------------------------------------------------

# Inicializamos el diccionario de la biblioteca
biblioteca = {}

# Función para agregar un nuevo libro
def agregar_libro():
    titulo = input("Ingrese el título del libro: ")
    autor = input("Ingrese el autor del libro: ")
    año = input("Ingrese el año de publicación del libro: ")
    biblioteca[titulo] = {
        "autor": autor,
        "año": año,
        "disponible": True
    }
    print(f'El libro "{titulo}" ha sido añadido a la biblioteca.')

# Función para prestar un libro
def prestar_libro():
    titulo = input("Ingrese el título del libro que desea prestar: ")
    if titulo in biblioteca:
        if biblioteca[titulo]["disponible"]:
            biblioteca[titulo]["disponible"] = False
            print(f'El libro "{titulo}" ha sido prestado.')
        else:
            print(f'El libro "{titulo}" ya está prestado.')
    else:
        print(f'El libro "{titulo}" no se encuentra en la biblioteca.')

# Función para devolver un libro
def devolver_libro():
    titulo = input("Ingrese el título del libro que desea devolver: ")
    if titulo in biblioteca:
        if not biblioteca[titulo]["disponible"]:
            biblioteca[titulo]["disponible"] = True
            print(f'El libro "{titulo}" ha sido devuelto.')
        else:
            print(f'El libro "{titulo}" no está prestado.')
    else:
        print(f'El libro "{titulo}" no se encuentra en la biblioteca.')

# Función para mostrar todos los libros
def mostrar_libros():
    if biblioteca:
        for titulo, detalles in biblioteca.items():
            estado = "Disponible" if detalles["disponible"] else "No disponible"
            print(f'Título: {titulo}, Autor: {detalles["autor"]}, Año: {detalles["año"]}, Estado: {estado}')
    else:
        print("La biblioteca no tiene libros registrados.")

# Función para mostrar libros de un año específico
def mostrar_libros_por_año():
    año = input("Ingrese el año de publicación para buscar libros: ")
    encontrados = False
    for titulo, detalles in biblioteca.items():
        if detalles["año"] == año:
            estado = "Disponible" if detalles["disponible"] else "No disponible"
            print(f'Título: {titulo}, Autor: {detalles["autor"]}, Año: {detalles["año"]}, Estado: {estado}')
            encontrados = True
    if not encontrados:
        print(f"No se encontraron libros publicados en el año {año}.")

# Menú principal
def menu():
    while True:
        print("\n--- Menú de la Biblioteca ---")
        print("1. Agregar un nuevo libro")
        print("2. Prestar un libro")
        print("3. Devolver un libro")
        print("4. Ver todos los libros")
        print("5. Mostrar libros por año de publicación")
        print("6. Salir del programa")
        
        opcion = input("Seleccione una opción: ")

        if opcion == "1":
            agregar_libro()
        elif opcion == "2":
            prestar_libro()
        elif opcion == "3":
            devolver_libro()
        elif opcion == "4":
            mostrar_libros()
        elif opcion == "5":
            mostrar_libros_por_año()
        elif opcion == "6":
            print("Gracias por usar el sistema de la biblioteca. ¡Hasta luego!")
            break
        else:
            print("Opción no válida. Por favor, intente nuevamente.")

# Ejecutamos el menú
menu()





# ACTIVIDAD EN CLASES:


    # Ejercicio 1

nombre = "Rogelio"
apellido = "Chingon"
print("Hola mi nombre es", nombre, apellido)


# Ejercicio 2

precio = 100
descuento = 0.15
porcentaje = (precio / descuento) *100
print(f"El valor con decuento del 15% es de {porcentaje}")


# Ejercicio 3

edad = 36
if edad >= 18:
 print("Es un puto vegete, mayor de edad")
else:
 print("Eres un mocoso menor de edad")

# Ejercicio 4 - se utuliza el operador % para calcular el  residuo de la disivión del numero *2.

numero =int(input("Ingrese tú puto número:"))

if numero % 2 ==0:
 print(f"El número {numero} es par.")
else:
 print(f"Tu jodido número {numero} es impar pendejo")



# Ejercicio 5. Multiples operaciones.

numero1 = int(input("Ingrece su primer número : "))
numero2 = int(input("Ingrece su  segundo número : "))

# Menú de opciones

print("\nseleccione el calculo a realizar:")
print("1.Suma")
print("2.Resta")
print("3.Multiplicación")
print("4.División")

# Solicitamos al ususario que seleccione una opción.
opcion =input("Seleccione su opción requerida (1/2/3/4) : ")

# Realizar operación

if opcion == "1":
    resultado = numero1 + numero2
    operacion  = "suma"
elif opcion == "2":
    resultado = numero1 - numero2
    operacion = "resta"
elif opcion == "3":
    resultado = numero1 * numero2
    operacion = "multiplicación"
elif opcion == "4":
    if numero2 !=0:
       resultado = numero1 / numero2
       operacion ="division"
    else:
       resultado = "indefinida (division por cero no permitida )"
       operacion ="division"
else:
   resultado = "Opción no validad"
   operacion = None

#Mostrar el resultado de la operación

if operacion:
   print(f"\nEl resultado de la {operacion} de {numero1} y {numero2} es: {resultado}")
else:
   print(f"\n{resultado}")



# Ejercicio 6. Calificaciones

nota1 = float(input("Por favor, ingrese la primera nota: "))
nota2 = float(input("Por favor, ingrese la segunda nota: "))
nota3 = float(input("Por favor, ingrese la tercera nota: "))

# Calcular promedio

promedio = (nota1 + nota2 + nota3)/3

# Determinamos si aprobo el promedio o no

if promedio >= 70:
    print(f"Aprobaste con un promedio de {promedio:.2f}")
else:
    print(f"Reprobo con un promedio de {promedio:.2f}")


# Ejercicio 7.

num1 = int(input("Ingrezar # 1: "))
num2 = int(input("Ingrezar # 2: "))

#Determinar cual es mayor o menor

if num1 > num2:
    print(f"El número {num1} es mayor que {num2}.")
elif num2 > num1:
    print(f"El número {num2} es mayor de {num1}.")
else:
    print("Ambos número son iguales.")


# Ejercicio 8.

    nombre = input("Ingrece su Nombre: ")
print(f"¡Bienvenido,pendejo Alias {nombre}!")


# Ejercicio 9.

# ingrese un número
try:
    numero = int(input("Por favor, ingresa un número: "))
    
    # Imprimir la tabla de multiplicar del número ingresado
    print(f"Tabla de multiplicar del {numero}:")
    for i in range(1, 11):
        resultado = numero * i
        print(f"{numero} x {i} = {resultado}")
except ValueError:
    print("Por favor, ingresa un número entero válido.")




#Ejercicio 10.

numero1 = float(input("Ingrese un numero que desee: "))
numero2 = float(input("Ingrese otro numero que desee: "))

promedio = (numero1 + numero2) /2

print(f"El promedio de {numero1} y {numero2} es: {promedio}")


-----------------------------------------------------------------------------------------------------------------




"""Sumar 2 numeros"""

numero1 = 1
numero2 = 9
resultado = numero1 + numero2
print("El resultado es:", resultado);



""" Calcular el area de un circulo con un radido dado"""

import math

radio= 32
area = math.pi *radio ** 2  # Esto quiere decir radio al cuadrado
print("El area es:", area);



"""Concatena 2 cadens de textos"""

cadena1 = "hola"
cadena2 = "Cabron"

concatenacion = cadena1 + " " + cadena2

print("La cadena es", concatenacion)



""" Crear una lista con diferentes elementos e imprimirlos"""

lista1 = [1, "dos", 3.0, True]   # se pueden mezclar difernetes datos
print("Elementos: ", lista1)



"""Realizar una multiplpicación de dos números y muestre el resultado"""

num1 = 45
num2 = 85
resultadom = num1 * num2
print("La multiplicación  de 45 y 85 es:", resultadom)



"""Crear una cadena de texto y mostrar su longitud"""

cadenalarga = "Motivado y aprendiendo"
longitud = len(cadenalarga)  # Este metodo es el medidor de longitudes

print("EL valor de la longitud es:", longitud)



"""Calcular el promedio de una lista de números"""

listanum = [2,5,6,3,9,8,7,4,5,23,25,4,69,45,52]
promedio = sum(listanum) / len(listanum)  # Con estos 2 metodos se puede calcular los promedios
print("El promedio es :", promedio)


"""Formateo de cadenas (f)"""

edad = 25
nombree = "Rogelio"
print(f"Hola, me llamo {nombree} y tengo {edad} años.")


"""Funcion (input) """


nomb = input("Cual es tu nombre? :")
print(f"Hola, {nomb}")

nuumero1 = int(input("Introduce el primer número : "))
nuumero2 = int(input("Introduce el segundo número : "))
suma = nuumero1 + nuumero2
print(f"La suma es :  {suma}")




"""Ejemplo condicional Elif"""

edad = 15
if edad >= 18:
    print("Estas putamente viejo")
elif edad >= 16:
    ("Aún no tienes eso huevos rayados pendejo")
else:
    print("Eres un cagón, vete a tomar tete de tu mami.")



"""Estructuras de control"""

a = 50
b = 10
if a > b:
    print(" a te ganó b")
elif a < b:
    print("b le ganaste a")
else:
    print("Ustedes dos son unos putos gemelos") 



"""Comparar una cadena con un valor"""

cadenna = "Hola puto"
if cadenna == "Qubo parce":
    print("La cadena es ?")
else:
    print("La cadena no exite")


"""Pedir al usuario que ingrese una palabra y mostrarla en orden inverso."""

palabra = input("ingrese una palabra: ")
inverso = ""
for letra in palabra:
    inverso = letra + inverso
print("El orden inverso es:", inverso)
------------------------------------------------------------------------------------------------------

# While 1

def eliminar_duplicados(lista):
    lista_sin_duplicados =list(set(lista))
    return lista_sin_duplicados

numeros = [1,2,3,2,4,5,1,6,4,8,10,11,14,15,2,3,6,9,8]
resultado = eliminar_duplicados(numeros)
print("Lista sin duplicados: ", resultado)


# While 2.


import random

def adivinidar_numero():
    numero_secreto = random.randint(1,100) # COn este metodo se generea un número aleatorio
    intentos_restantes = 8

    print("¡Bienevenidos al juego adivina el número!")
    print("Tienes 7 intentos para adivinar un número entre 1 y 100.")


    while intentos_restantes> 0:   # Bucles que se ejecutan mientras haya intentos restantes
        try:
            intento = int(input("Ingrese su número : "))
        except ValueError:
            print("Por favor, ingrse número valido.")
            continue
    
        if intento < numero_secreto:
            print("El número es mayor.")

        elif intento > numero_secreto:
            print("El número es menor.")

        else:
            print(f"¡Felicidades Cabrón! Adivinaste el número {numero_secreto}.")
            break

    intentos_restantes -= 1
    print(f"Te quedan {intentos_restantes} intentos.")

    if intentos_restantes == 0:
        print(f"Se te acabron los intentos pendejo.. jjajajajaja, El número secreto era {numero_secreto}.")

# Ejecutar el juego
adivinidar_numero()



# While 3.


def contar_vocales(frase):

    indice = 0              # Aqui el indice de contador de vocales
    contador_vocales = 0
    vocales = "aeiouAEIOU" 

    while indice < len(frase):  # Bucle para recorrer la frase
        
        if frase[indice] in vocales:
            contador_vocales += 1
        indice += 1
    
    return contador_vocales

frase_usuario = input("Cual es tú frase Putito : ")

cantidad_vocales = contar_vocales(frase_usuario)

print(f"La frase contiene {cantidad_vocales} vocales.")



# While 4.

# CALCULADORA PYTHON

def suma(a,b):
    return a+b

def resta(a,b):
    return a-b

def multiplicacion(a,b):
    return a*b

def division(a,b):
    return a/b

def calculadora():
    while True:
        print("Selecione una operación")
        print("1. Suma")
        print("2. Resta")
        print("3. Multiplpicar")
        print("4. Dividir")
        print("5. Salir")

        opcion = input("Seleccione número (1,2,3,4,5):")

        if opcion =="5":
            print("Esta saliendo de la calculadora")
            break

        if opcion in ["1","2","3","4"]:
            numero1 = float(input("Ingrese numero 1: "))
            numero2 = float(input("Ingrese numero 2: "))

        if opcion == "1":
            print("La Suma es:", suma(numero1, numero2))  

        elif opcion =="2":
            print("La Resta es:", resta(numero1, numero2))
         
        elif opcion =="3":
            print("La Multiplicación es:", multiplicacion(numero1, numero2))
            
        elif opcion =="4":
            print("La División es:", division(numero1, numero2))
            
        else:   #si no nos da
            print("Opción no valida,intente de nuevo ")
            break

calculadora()


-----------------------------------------------------------------

def lista_numeros_pares():
    contador = 1
    lista_par =[]

    while contador <= 100:

        if contador % 2 == 0:
            lista_par.append(contador)

        contador += 1

    return lista_par

numeros_pares = lista_numeros_pares()

print(f"LIsta de números pares del 1 al 100:  {numeros_pares}")


---------------------------------------------------------------------


numero = 50
print(type(numero))
cadena =str(numero)
print(type(cadena))

------------------------------------------------------------------------------------------

# Reemplaza un caráter en un a cadena 

cadena = "Aprender ingles"
nueva_cadena = cadena.replace("i", "I")
print("nueva = ", nueva_cadena)


--------------------------------------------------------------------------------------------

# Pasar una cadena de mayúsculas a minúsculas


mayus = "DEBES APRENDER INGLES CON URGENCIA"
minus = mayus.lower()     # Con esta función de python reservada podras aplicar el cambio
print("Minúsculas : ", minus)

----------------------------------------------------------------------------------------------

# Ordena una lista de números de menor a mayor.


lista = [5,4,8,6,9,2,12,54,32,9,8,41,45,98,8,7,8,9,66,678]
lista.sort()  #funcion para ordenar  la lista

print("Ordenada", lista)


----------------------------------------------------------------------------------------------

